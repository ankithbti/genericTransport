// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoFiles/genericTransport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protoFiles/genericTransport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace genericTransport {

namespace {

const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protoFiles_2fgenericTransport_2eproto() {
  protobuf_AddDesc_protoFiles_2fgenericTransport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protoFiles/genericTransport.proto");
  GOOGLE_CHECK(file != NULL);
  HeartBeat_descriptor_ = file->message_type(0);
  static const int HeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, hbtext_),
  };
  HeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protoFiles_2fgenericTransport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeat_descriptor_, &HeartBeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protoFiles_2fgenericTransport_2eproto() {
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
}

void protobuf_AddDesc_protoFiles_2fgenericTransport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!protoFiles/genericTransport.proto\022\020gen"
    "ericTransport\"\033\n\tHeartBeat\022\016\n\006hbText\030\001 \002"
    "(\t", 82);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protoFiles/genericTransport.proto", &protobuf_RegisterTypes);
  HeartBeat::default_instance_ = new HeartBeat();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protoFiles_2fgenericTransport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protoFiles_2fgenericTransport_2eproto {
  StaticDescriptorInitializer_protoFiles_2fgenericTransport_2eproto() {
    protobuf_AddDesc_protoFiles_2fgenericTransport_2eproto();
  }
} static_descriptor_initializer_protoFiles_2fgenericTransport_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int HeartBeat::kHbTextFieldNumber;
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:genericTransport.HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:genericTransport.HeartBeat)
}

void HeartBeat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hbtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:genericTransport.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  hbtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protoFiles_2fgenericTransport_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
  if (has_hbtext()) {
    hbtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:genericTransport.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hbText = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hbtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hbtext().data(), this->hbtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "genericTransport.HeartBeat.hbText");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:genericTransport.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:genericTransport.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:genericTransport.HeartBeat)
  // required string hbText = 1;
  if (has_hbtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hbtext().data(), this->hbtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "genericTransport.HeartBeat.hbText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hbtext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:genericTransport.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:genericTransport.HeartBeat)
  // required string hbText = 1;
  if (has_hbtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hbtext().data(), this->hbtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "genericTransport.HeartBeat.hbText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hbtext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:genericTransport.HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;

  // required string hbText = 1;
  if (has_hbtext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hbtext());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hbtext()) {
      set_has_hbtext();
      hbtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hbtext_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  hbtext_.Swap(&other->hbtext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

// required string hbText = 1;
bool HeartBeat::has_hbtext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartBeat::set_has_hbtext() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartBeat::clear_has_hbtext() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartBeat::clear_hbtext() {
  hbtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hbtext();
}
 const ::std::string& HeartBeat::hbtext() const {
  // @@protoc_insertion_point(field_get:genericTransport.HeartBeat.hbText)
  return hbtext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeat::set_hbtext(const ::std::string& value) {
  set_has_hbtext();
  hbtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genericTransport.HeartBeat.hbText)
}
 void HeartBeat::set_hbtext(const char* value) {
  set_has_hbtext();
  hbtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genericTransport.HeartBeat.hbText)
}
 void HeartBeat::set_hbtext(const char* value, size_t size) {
  set_has_hbtext();
  hbtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genericTransport.HeartBeat.hbText)
}
 ::std::string* HeartBeat::mutable_hbtext() {
  set_has_hbtext();
  // @@protoc_insertion_point(field_mutable:genericTransport.HeartBeat.hbText)
  return hbtext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartBeat::release_hbtext() {
  clear_has_hbtext();
  return hbtext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeat::set_allocated_hbtext(::std::string* hbtext) {
  if (hbtext != NULL) {
    set_has_hbtext();
  } else {
    clear_has_hbtext();
  }
  hbtext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hbtext);
  // @@protoc_insertion_point(field_set_allocated:genericTransport.HeartBeat.hbText)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace genericTransport

// @@protoc_insertion_point(global_scope)
